# -*- coding: utf-8 -*-
"""Numpy_파이썬 머신러닝 완벽 가이드.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wBTXPyyLh0i4njTP2dyXacTdKK73kyYj

개요
"""

import numpy as np

array1 = np.array([1, 2, 3])    # 1차원 데이터
print(type(array1))
print(array1.shape)

array2 = np.array([[1, 2, 3],
                   [2, 3, 4]])
print(type(array2))
print(array2.shape)

array3 = np.array([[1, 2, 3]])    # 2차원 데이터, 괄호로 표현
print(type(array3))
print(array3.shape)

print(array1.ndim)    # array1의 차원
print(array2.ndim)
print(array3.ndim)

print(array1.dtype)    # ndarray내의 데이터 타입 확인; int64

list2 = [1, 2, 'test']      # ndarray내의 데이터 타입은 같은 데이터 타입만 가능
array2 = np.array(list2)    # 만약 섞여 있다면 데이터 크기가 더 큰 데이터 타입으로 형 변환을 일괄 적용
print(array2, array2.dtype) # dtype: 유니코드 문자열

list3 = [1, 2, 3.0]
array3 = np.array(list3)
print(array3, array3.dtype)

"""ndarray의 차원과 크기를 변경하는 reshape()"""

array1 = np.arange(10)
print(array1)

array2 = array1.reshape(2, 5)
print(array2)

array3 = array1.reshape(3, 4)    # 오류 발생
print(array3)

array1 = np.arange(10)
print(array1)

array2 = array1.reshape(-1, 5)    # 고정된 5개의 column에 맞는 row를 자동으로 새롭게 생성해 변환
print(array2)

array3 = array1.reshape(5, -1)    # 고정된 5개의 row에 맞는 column을 자동으로 새롭게 생성해 변환
print(array3)

array4 = array1.reshape(-1, 4)    # 오류 발생
print(array4)

array1 = np.arange(8)
array3d = array1.reshape((2, 2, 2))
print(array3d)

# 3차원 ndarray를 2차원 ndarray로 변환
array5 = array3d.reshape(-1, 1)
print(array5)

# 1차원 ndarray를 2차원 ndarray로 변환
array6 = array1.reshape(-1, 1)
print(array6)

"""Indexing

Slicing
"""

# 1차원 ndarray 생성
array1 = np.arange(start=1, stop=10)
print(array1)

value = array1[2]
print(value)
print(type(value))

# index를 이용해 수정
array1[0] = 9
array1[8] = 0
print(array1)

array1d = np.arange(start=1, stop=10)
array2d = array1d.reshape(3, 3)
print(array2d)

print(array2d[0, 0])
print(array2d[0, 1])
print(array2[1, 0])
print(array2d[2,2])

array1d = np.arange(start=1, stop=10)
array2d = array1d.reshape(3, 3)
print(array2d)

print('\n', array2d[0:2, 0:2])
print('\n', array2d[1:3, 0:3])
print('\n', array2d[1:3, :])
print('\n', array2d[:, :])
print('\n', array2d[:2, 1:])
print('\n', array2d[:2, 0])

# 2차원 ndarray에서 뒤에 오는 인덱스를 없애면 1차원 ndarray 반환
print(array2d[0])
print(array2d[1])
print(array2d[0].shape, array2d[1].shape)

"""Fancy Indexing"""

array1d = np.arange(start=1, stop=10)
array2d = array1d.reshape(3, 3)
print(array2d)

array3 = array2d[[0,1], 2]
print(array3)

array4 = array2d[[0,1], 0:2]
print(array4)

array5 = array2d[[0,1]]
print(array5)

"""Boolean Indexing"""

# Boolean Indexing working process
# step 1: array1d > 5 Boolean 조건을 []내에 입력
# step 2: False값은 무시하고 True값에 해당하는 index값만 저장
# step 3: 저장된 index값으로 데이터 조회

array1d = np.arange(start=1, stop=10)

# []안에 array1d > 5 Boolean Indexing 적용
array3 = array1d[array1d > 5]
print(array3)

array1d > 5

boolean_indexes = np.array([False, False, False, False, False,  True,  True,  True,  True])
array3 = array1d[boolean_indexes]
print(array3)

indexes = np.array([5, 6, 7, 8])
array4 = array1d[indexes]
print(array4)

"""행렬의 정렬 sort()와 argsort()"""

org_array = np.array([3, 1, 9, 5])
print(org_array)

# np.sort()로 정렬
sort_array1 = np.sort(org_array)
print(sort_array1)

print(org_array)

# ndarray.sort()로 정렬
sort_array2 = org_array.sort()
print(sort_array2)

print(org_array)

# 내림차순 정렬
sort_array1_desc = np.sort(org_array)[::-1]
print(sort_array1_desc)

array2d = np.array([[8, 12],
                   [7, 1]])
sort_array2d_axis0 = np.sort(array2d, axis=0)
print(sort_array2d_axis0)

sort_array2d_axis1 = np.sort(array2d, axis=1)
print(sort_array2d_axis1)

"""정렬된 행렬의 인덱스 반환"""

org_array = np.array([3, 1, 9, 5])
sort_indices = np.argsort(org_array)
print(type(org_array))
print(sort_indices)    # 행렬 정렬 시 원본 행렬의 인덱스

# 내림차순 정렬
org_array = np.array([3, 1, 9, 5])
sort_indices_desc = np.argsort(org_array)[::-1]
print(sort_indices_desc)

name_array = np.array(['John', 'Mike', 'Sarah', 'Kate', 'Samuel'])
score_array = np.array([78, 95, 84, 98, 88])

sort_indices_asc = np.argsort(score_array)
print(sort_indices_asc)
print(name_array[sort_indices_asc])

"""선형대수 연산 - 행렬 내적과 전치 행렬 구하기"""

# 행렬 내적(행렬 곱)
A = np.array([[1, 2, 3],
              [4, 5, 6]])
B = np.array([[7, 8],
              [9, 10],
              [11, 12]])

dot_product = np.dot(A, B)
print(dot_product)

# 전치 행렬
A = np.array([[1, 2],
              [3, 4]])
transpose_mat = np.transpose(A)
print(transpose_mat)

